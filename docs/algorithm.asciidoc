:last-update-label!:

= Algorithm
LE GARREC Vincent <github85@le-garrec.fr>

:toc:
:icons: font

This document describe the principe of various algorithms that are used to restore orientation and to separate double page images.

== Global concept

Algorithm have these steps :

  * In case of double page images, found the line that separate the two pages,
  * Rotate pages to restore vertical and horizontal lines,
  * Crop page to data and restore border

== Split double page images

=== Curve presence at top and bottom of folding

Method ``SeparatePage.found_split_line_with_wave``

  * Exemple

image::separate-1-input.png[]

  * Pretreatment

Apply :

  ** a blur : for black and white only
  ** a threshold : to remove small noise and to convert gray to black / white
  ** a erode : to work with a B/W image with big dot instead of lots of small data.

Image 2_4.png in debug mode :

image::separate-1-pretreatment.png[]

  * Main algorithm

    ** Ideal case

Found the biggest contour to match the two pages.

Found the polyline with the fewest lines but that have 3 points in the two interessing areas (wave).

The line that separate the two pages is the top (in blue) of the two "waves".

Image 2_6_*.png in debug mode :

image::separate-1-mainalgo.png[]

    ** Contour match only page per page

Instead of having one big contour, you have two contours, one per page.

Then found the polyline with the fewest lines but that have 2 points in the two interessing areas (wave).

The line that separate the two pages is the mean of the top (in blue) of the two "waves" of the two contours.

image::separate-1-algo2_1.png[]

image::separate-1-algo2_2.png[]

  * Posttreatment

Apply a mask with an inclined line to separe pages.

Image 3_1.png and 3_2.png in debug mode :

image::separate-1-posttreatment.png[]

You can see that the right is a few inclined.

== Rotate images

=== Found horizontal lines based on text

  * Exemple

image::rotate-1-input.png[]

  * Pretreatment

Apply a erode to thicken letter to have just a big black mass to have less noise and to ease detect of liner.

Image 4_*_2.png in debug mode :

image::rotate-1-pretreatment.png[]

  * Main algorithm

Found all lines then keep only them who have a angle less than 20Â°. Then keep them who have a angle closed to the mean.

Image 4_*_4.png in debug mode :

image::rotate-1-mainalgo.png[]

  * Posttreatment

Rotate image.

Image 4_*_5.png in debug mode :

image::rotate-1-posttreatment.png[]

You can see that the text in more horizontal.

== Remove border and keep interesting text

=== Found text with contour not to big, not to small

  * Exemple

image::removeborder-1-input.png[]

  * Pretreatment

Apply a erode to thicken letter to have just a big black mass to have less noise and to ease detect of liner.

Image 5_*_3.png in debug mode :

image::removeborder-1-pretreatment.png[]

  * Main algorithm

Found the biggest (red) contour and the associated (blue) rectangle. With this action, you have isolated the border of the page.

Image 5_*_5.png in debug mode :

image::removeborder-1-mainalgo1.png[]

Then crop.

Found all (not to big and not to small) contours to find all interesting data.

Image 5_*_9.png in debug mode :

image::removeborder-1-mainalgo2.png[]

NOTE: It's possible that no contour is found after the filter of all contours (blank image). Then return the pixel at the center of the image.

  * Posttreatment

Then found the rectangle that catch all contours and crop again.

Image 5_*_10.png in debug mode :

image::removeborder-1-posttreatment.png[]

== Restore border

=== Keep proportional border

The idea is to detect the dpi, found the missing width and height to match the desired paper size. Then add border at the top and the bottom by keeping the proportion of removed pixels during the previous algo. For the left and the right, the image is centered and the two borders will be the same.

Suppose you removed 100 pixels at the top and 200 pixels at the bottom when keeping interesting text. To match the desired paper, you need to add 200 pixels. Then this algo will add 66 pixels at the top and 133 pixels at the bottom.

image::restoreborder-1-input.png[]

image::restoreborder-1-mainalgo.png[]

